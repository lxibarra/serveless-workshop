# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

tenant: lxibarra # NOTE: change this to your Serverless Enterprise tenant name
app: serverless-workshop # NOTE: change this to your Serverless Enterprise app name
service: serverless-enterprise # NOTE: optionally update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: ">=1.37.1"

provider:
  name: aws
  runtime: nodejs8.10
  region: us-west-2
  stage: ${env:STAGE, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'dynamodb:*'
      Resource:
        - { "Fn:GetAtt": ["CrudDemo", "Arn"] }

plugins:
  - '@serverless/enterprise-plugin'
  - serverless-offline
  - serverless-iam-roles-per-function
functions:
  create:
    handler: handler.create

    events:
      - http:
          private: true
          method: post
          path: create
  read:
    handler: handler.read

    events:
      - http:
          method: get
          path: read

  hello:
    handler: handler.hello

    events:
      - http:
          path: hello
          method: post
  lorem:
    handler: handler.lorem

    events:
      - http:
          path: lorem
          method: get
resources:
  Resources:
    CrudDemo:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
